{"version":3,"sources":["Components/NameRequest/NameRequest.jsx","Components/Square.jsx","Components/Board.jsx","Components/Game.jsx","App.js","index.js"],"names":["NameRequest","state","name","handleChange","event","setState","target","value","handleSubmit","props","getUserName","className","onChange","maxLength","onClick","this","error","React","Component","Square","shipType","type","Board","i","j","key","ships","squares","numbers","map","index","idx","renderSquare","Game","handleClick","makeSystemMove","_systemSquares","slice","_systemShips","incrementPlayerScore","checkGameResult","status","user_name","setTimeout","_userSquares","userSquares","makeAnotherMove","getRandom","_userShips","who","userScore","systemScore","isGameEnded","finalStatus","shipsData","componentDidMount","locateShipsRandomly","shipsArray","arr","length","decks","locateShip","n","Math","floor","random","x","y","kx","ky","checkLocationShip","Array","fill","item","toX","fromY","toY","StartAgain","startAgainFunction","Boards","App","user","startAgain","date","getDate","Date","now","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f87bed0.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./nameRequest.css\";\r\n\r\nexport class NameRequest extends React.Component {\r\n    state = {\r\n        name: \"\"\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ name: event.target.value })\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        if (this.state.name !== \"\") {\r\n            return this.props.getUserName(this.state.name);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"nameRequest\" >\r\n                <div className=\"form\" >\r\n                    <div className=\"form__item\">\r\n                        <label className=\"form__item-label\">Введите ваше имя</label>\r\n                        <input onChange={event => { this.handleChange(event) }} className=\"form__item-field\" maxLength=\"30\"></input>\r\n                    </div>\r\n                </div>\r\n                <div className=\"submit-container\">\r\n                    <button className=\"submit_button\" onClick={this.handleSubmit}>Подтвердить</button>\r\n                    <p className=\"error_message\">{this.state.error}</p>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport function Square(props) {\r\n    if (props.value === \"M\") {  //если промах, отобразить span(точку) внутри клетки\r\n        return (\r\n            <div className={\"square\"} onClick={props.onClick}>\r\n                <div className=\"dot\"></div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        //если в клетке есть корабль и это поле игрока, то отобразить палубу как закрашенную клетку\r\n        <div className={(props.shipType && props.type === \"user\") ? \"square square-ship\" : \"square\"} onClick={props.onClick}>\r\n            {props.value}\r\n        </div >\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Square } from \"./Square\"\r\n\r\nexport class Board extends React.Component {\r\n    renderSquare(i, j) {\r\n        if (this.props.type === \"system\") { // если это доска компьютера, то передать функцию onClick клетке\r\n            return <Square key={i * 10 + j} shipType={this.props.ships[i][j]} type={this.props.type} value={this.props.squares[i][j]} onClick={() => this.props.onClick(i, j)} />\r\n        }\r\n        else {\r\n            return <Square key={i * 10 + j} shipType={this.props.ships[i][j]} type={this.props.type} value={this.props.squares[i][j]} />\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n        const column_coordinates = [\"A\", \"Б\", \"В\", \"Г\", \"Д\", \"Е\", \"Ж\", \"З\", \"И\", \"К\"];\r\n\r\n        return (\r\n            <div className=\"board\" >\r\n                <div className=\"column__coordinates\">\r\n                    {column_coordinates.map((value, index) => {\r\n                        return <div key={index} className=\"coordinate__column-item\">{value}</div>\r\n                    })}\r\n                </div>\r\n                <div>\r\n                    {numbers.map((value, index) => {\r\n                        return <div key={index} className=\"coordinate__row-item\">{value}</div>\r\n                    })}\r\n                    <div className=\"squares\">\r\n                        {numbers.map((value, idx) => {\r\n                            return <div key={idx} className=\"board-row\">\r\n                                {numbers.map((value, index) => {\r\n                                    //return this.renderSquare(idx * 10 + index)\r\n                                    return this.renderSquare(idx, index)\r\n                                })}</div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Board } from './Board';\r\n\r\nexport class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            _userSquares: Array(10).fill(null).map(item => (new Array(10).fill(null))),\r\n            _systemSquares: Array(10).fill(null).map(item => (new Array(10).fill(null))),\r\n\r\n            _userShips: Array(10).fill(null).map(item => (new Array(10).fill(null))),\r\n            _systemShips: Array(10).fill(null).map(item => (new Array(10).fill(null))),\r\n\r\n            userScore: 0,\r\n            systemScore: 0,\r\n\r\n            status: \"Ваш ход\",\r\n            finalStatus: \"\",\r\n            user_name: this.props.name,\r\n            isGameEnded: false,\r\n        };\r\n        //Squares - массив клеток, отмечать попадания и промахи, то есть выстрелы\r\n        //Ships - массив клеток, где отмечены корабли\r\n        //Score - счет игрока\r\n    }\r\n\r\n    handleClick = (i, j, type) => {\r\n        let makeSystemMove = true;  //флаг - компьютер будет стрелять после этого хода\r\n        let squares = this.state._systemSquares.slice();\r\n        if (this.state._systemShips[i][j]) {\r\n\r\n            this.incrementPlayerScore(\"user\");\r\n            squares[i][j] = \"X\";\r\n\r\n            let isUserWon = this.checkGameResult(\"user\");\r\n            if (!isUserWon) {   //если пользователь не потопил все корабли\r\n                this.setState({ status: `Вы попали. ${this.state.user_name}, ваш ход.` })\r\n            }\r\n\r\n            makeSystemMove = false;   //сделать еще один ход\r\n        }\r\n        else {\r\n            squares[i][j] = \"M\";\r\n            this.setState({ status: \"Вы промахнулись. Компьютер стреляет\" })\r\n        }\r\n        this.setState({ _systemSquares: squares });     //обновить массив клеток с информацией о выстрелах\r\n\r\n        if (makeSystemMove) {\r\n            setTimeout(() => {\r\n                this.makeSystemMove(this.state._userSquares.slice());  //запустить ход компьютера\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    makeSystemMove = (userSquares) => {\r\n        let i, j;\r\n        let makeAnotherMove = false;  //флаг - компьютер ходит один раз\r\n        i = this.getRandom(9);  //случайная координата\r\n        j = this.getRandom(9);\r\n        if (userSquares[i][j]) { //если компьютер уже стрелял в клетку\r\n            return this.makeSystemMove(userSquares);  //запустить функцию еще раз\r\n        }\r\n        else {\r\n            if (this.state._userShips[i][j]) {\r\n\r\n                this.incrementPlayerScore(\"system\");\r\n                this.setState({ status: \"Компьютер попал в ваш корабль. Компьютер стреляет.\" })\r\n\r\n                userSquares[i][j] = \"X\";\r\n                let isSystemWon = this.checkGameResult(\"system\");\r\n                if (!isSystemWon) {\r\n                    makeAnotherMove = true; //флаг - компьютер делает еще один выстрел\r\n                }\r\n            }\r\n            else {\r\n                userSquares[i][j] = \"M\";\r\n                this.setState({ status: `Компьютер промахнулся. ${this.state.user_name}, ваш выстрел.` })\r\n            }\r\n            this.setState({ _userSquares: userSquares });\r\n\r\n            if (makeAnotherMove) {\r\n                setTimeout(() => {\r\n                    this.makeSystemMove(userSquares);\r\n                }, 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    incrementPlayerScore = (who) => {\r\n        if (who === \"user\") {\r\n            this.setState({ userScore: this.state.userScore + 1 })\r\n        }\r\n        else {\r\n            this.setState({ systemScore: this.state.systemScore + 1 })\r\n        }\r\n    }\r\n\r\n    checkGameResult = (who) => {\r\n        if (who === \"user\") {\r\n            if (this.state.userScore + 1 === 20) {  // 20 клеток занимают все корабли\r\n                this.setState({ isGameEnded: true, finalStatus: `Поздравляем, ${this.state.user_name}! Вы выиграли` })\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            if (this.state.systemScore === 20) {\r\n                this.setState({ isGameEnded: true, finalStatus: \"Вы проиграли.\" })\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n\r\n    shipsData = [\r\n        '',  //индекс в массиве означает количество кораблей этого типа\r\n        [4, 'четырехпалубник'], //первый параметр это количество палуб(клеток)\r\n        [3, 'трехпалубник'],\r\n        [2, 'двухпалубник'],\r\n        [1, 'однопалубник']\r\n    ];\r\n\r\n\r\n    componentDidMount = () => {  //при mount компонента Game расположить корабли на досках\r\n        this.locateShipsRandomly(\"user\");\r\n        this.locateShipsRandomly(\"system\");\r\n    }\r\n\r\n    locateShipsRandomly = (type) => {  //type - чья доска\r\n        let shipsArray;\r\n        if (type === \"user\") {\r\n            shipsArray = this.state._userShips.map(function (arr) {  //сделать копию массива клеток с кораблями\r\n                return arr.slice();\r\n            });\r\n        }\r\n        else {\r\n            shipsArray = this.state._systemShips.map(function (arr) {\r\n                return arr.slice();\r\n            });\r\n        }\r\n\r\n        for (let i = 1, length = this.shipsData.length; i < length; i++) {\r\n            let decks = this.shipsData[i][0];  //количество палуб корабля\r\n            let shipType = this.shipsData[i][1];   //типа корабля\r\n            for (var j = 0; j < i; j++) {  //создать количество кораблей какого-либо типа соответственно номера его индекса\r\n                this.locateShip(decks, shipType, shipsArray, type); //расположить корабль случайным образом\r\n            }\r\n        }\r\n    }\r\n\r\n    getRandom = (n) => {  // n - максимальное необходимое значение\r\n        return Math.floor(Math.random() * (n + 1));\r\n    };\r\n\r\n    locateShip = (decks, shipType, shipsArray, type) => {\r\n        var kx = this.getRandom(1),     //получить направление корабля\r\n            ky = (kx === 0) ? 1 : 0,    // kx == 1 и ky == 0 - корабль расположен вертикально \r\n            x, y;                       // kx == 0 и ky == 1 - горизонтально.\r\n\r\n        if (kx === 0) {         //сгенерировать начальные координаты\r\n            x = this.getRandom(9);\r\n            y = this.getRandom(10 - decks); // 10-кол-во палуб, чтобы не было выхода за границы поля по горизонтали\r\n        } else {\r\n            x = this.getRandom(10 - decks); // 10-кол-во палуб, чтобы не было выхода за границы поля по вертикали\r\n            y = this.getRandom(9);\r\n        }\r\n\r\n        let result = this.checkLocationShip(x, y, kx, ky, decks, shipsArray);  //проверить может ли быть расположен корабль в этих координатах\r\n\r\n        if (!result) return this.locateShip(decks, shipType, shipsArray, type); //если не может, то заново запустить функцию\r\n\r\n        if (kx === 0) { //если корабль расположен горизонтально\r\n            for (let i = 0; i < decks; i++) {\r\n                shipsArray[x][y + i] = shipType; //ставим отметку на ячейку массива корабли, что там есть корабль\r\n            }\r\n        }\r\n        else { //если корабль расположен вертикально\r\n            for (let i = 0; i < decks; i++) {\r\n                shipsArray[x + i][y] = shipType;\r\n            }\r\n        }\r\n\r\n        if (type === \"user\") { //расположить на поле пользователя \r\n            this.setState({ _userShips: shipsArray })   //сохранить измененный массив с новым кораблем\r\n        }\r\n        else {\r\n            this.setState({ _systemShips: shipsArray })\r\n        }\r\n    }\r\n\r\n    checkLocationShip(x, y, kx, ky, decks, shipsArray) {\r\n\r\n        let fromX, toX, fromY, toY;  // индексы начала и конца проверки \r\n        fromX = (x === 0) ? x : x - 1;  //если корабль в первой строке, то начать проверку с этой строки, если нет с строки выше\r\n\r\n        //если корабль расположен вертикально и последняя палуба примыкает к границе поля\r\n        if (x + kx * decks === 10 && kx === 1) toX = x + decks; //конец проверки = индекс строки последней палубы\r\n\r\n        //если корабль расположен вертикально и после последней палубы есть еще строка по меньшей мере\r\n        if (x + kx * decks < 10 && kx === 1) toX = x + decks + 1; //конец проверки = индекс строки после корабля\r\n\r\n        // корабль расположен горизонтально вдоль нижней границы игрового поля\r\n        if (x === 9 && kx === 0) toX = x + 1;\r\n\r\n        // корабль расположен горизонтально где-то по середине игрового поля\r\n        if (x < 9 && kx === 0) toX = x + 2;\r\n\r\n        // формируем индексы начала и конца цикла для столбцов, принцип аналогичен строкам\r\n        fromY = (y === 0) ? y : y - 1;\r\n        if (y + ky * decks === 10 && ky === 1) toY = y + decks;\r\n        if (y + ky * decks < 10 && ky === 1) toY = y + decks + 1;\r\n        if (y === 9 && ky === 0) toY = y + 1;\r\n        if (y < 9 && ky === 0) toY = y + 2;\r\n\r\n        // циклы с проверкой ячеек в заданном диапазоне\r\n        // если значение текущей ячейки не пусто (есть палуба корабля) возвращаем false\r\n        for (var i = fromX; i < toX; i++) {\r\n            for (var j = fromY; j < toY; j++) {\r\n                if (shipsArray[i][j]) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        let StartAgain = () => {\r\n            if (this.state.isGameEnded) { //показать кнопку Начать сначала, если игра завершена\r\n                return <button className=\"submit_button\" onClick={this.props.startAgainFunction}>Начать сначала</button>\r\n            }\r\n            else return '';\r\n        }\r\n\r\n        let Boards = () => {\r\n            if (!this.state.isGameEnded) {  //если игра закончена, заблокировать возможность сделать выстрел на поле компьютера\r\n                return (\r\n                    <div className=\"game-boards\">\r\n                        <Board ships={this.state._userShips} squares={this.state._userSquares} type=\"user\" />\r\n                        <Board ships={this.state._systemShips} squares={this.state._systemSquares} type=\"system\" onClick={(i, j) => this.handleClick(i, j)} />\r\n                    </div>\r\n                );\r\n            }\r\n            else {\r\n                return (\r\n                    <div className=\"game-boards\">\r\n                        <Board ships={this.state._userShips} squares={this.state._userSquares} type=\"user\" onClick={() => { }} />\r\n                        <Board ships={this.state._systemShips} squares={this.state._systemSquares} type=\"system\" onClick={() => { }} />\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        let status = (!this.state.isGameEnded) ? this.state.status : this.state.finalStatus;\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-info\">Морской бой</div>\r\n                <div className=\"game-space\">\r\n                    <Boards />\r\n                    <div className=\"game-info\">\r\n                        <div>{status}</div>\r\n                    </div>\r\n                    <div className=\"game-info\">\r\n                        <StartAgain />\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { NameRequest } from \"./Components/NameRequest/NameRequest\"\r\nimport { Game } from \"./Components/Game\"\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: \"\",\r\n\r\n            date: \"\",\r\n        }\r\n    }\r\n\r\n    getUserName = (name) => {\r\n        this.setState({ user: name })\r\n    }\r\n\r\n    startAgain = () => {\r\n        this.setState({ date: this.getDate() })\r\n    }\r\n\r\n    getDate = () => {\r\n        return Date.now();\r\n    }\r\n\r\n    render() {\r\n        if (this.state.user) {\r\n            return <Game name={this.state.user} key={this.state.date} startAgainFunction={this.startAgain} />\r\n        }\r\n        else {\r\n\r\n            return <NameRequest getUserName={this.getUserName} />\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}